/*
 * level.cpp
 *
 *  Created on: Jan 24, 2013
 *      Author: njenson2
 */

#include "level.h"
#include "constants.h"

bool is_portal_clicked=false;
bool is_laser_clicked=false;


Level::Level(){

}

Level::Level(vector <Rectangle> blocks, vector <Enemy> enemies, Player player, Point finish){
	this->blocks = blocks;
	this->enemies = enemies;
	this->player = player;
	this->finish = finish;
}

void Level::draw_buttons(){
	Circle portal_button = Circle (PORTAL_BUTTON_LOCATION, BUTTON_RADIUS);
	Message portal_label = Message(Point(PORTAL_BUTTON_LOCATION.get_x() - BUTTON_RADIUS + TEXT_OFFSET, PORTAL_BUTTON_LOCATION.get_y() + TEXT_HEIGHT), "Portal");
	cwin<<portal_button<<portal_label;

	Rectangle reset_button(RESET_BOTTOM_LEFT, RESET_WIDTH, RESET_HEIGHT);
	Message reset_label = Message(Point(RESET_BOTTOM_LEFT.get_x() + TEXT_OFFSET, RESET_BOTTOM_LEFT.get_y() + (RESET_HEIGHT / 2.0)), "Reset");

	reset_button.draw();
	cwin << portal_button << portal_label << reset_label;
}

bool Level::portal_click(Point click){
	double click_x=click.get_x()-PORTAL_BUTTON_LOCATION.get_x();
	double click_y=click.get_y()-PORTAL_BUTTON_LOCATION.get_y();
	double length_of_hyp=sqrt((pow(click_x,2))+(pow(click_y,2)));
	if (!(length_of_hyp>BUTTON_RADIUS)){
		is_portal_clicked=true;
		portal_gun();
		return true;
	}
	else {
		is_portal_clicked=false;
		return false;
	}
}

void Level::reset_click(Point click){
	if(click.get_x() > RESET_BOTTOM_LEFT.get_x()
			&& click.get_x() < (RESET_BOTTOM_LEFT.get_x() + RESET_WIDTH)
			&& click.get_y() < (RESET_BOTTOM_LEFT.get_y() + RESET_HEIGHT)
			&& click.get_y() > RESET_BOTTOM_LEFT.get_y()){
		start_over();
	}
}

void Level::portal_gun(){
	Point portalA_point;
	Point portalB_point;

	do{
		portalA_point=cwin.get_mouse("Click to place the first portal");
	}while(portalA_point.get_y()<MENU_LINE.get_end().get_y());

	cwin<<portalA_point;
	this->portalA = Line(portalA_point, Point(portalA_point.get_x(),portalA_point.get_y()+PORTAL_LENGTH), "blue");
	double distance;
	double acc=1;
	do{
		do {
			if (acc==1){portalB_point=cwin.get_mouse("Click to place the second portal");}
			else if (portalB_point.get_y()<MENU_LINE.get_end().get_y()){portalB_point=cwin.get_mouse("Invalid click, try again");}
			else {portalB_point=cwin.get_mouse("Click too far away, try again");}
			distance = sqrt(pow((portalA_point.get_x()-portalB_point.get_x()),2)+pow((portalA_point.get_y()-portalB_point.get_y()),2));
			this->portalB = Line(portalB_point, Point(portalB_point.get_x(),portalB_point.get_y()+PORTAL_LENGTH), "orange");
			acc++;}while (distance>CLICK_DISTANCE_LIMIT);
	}while (portalB_point.get_y()<MENU_LINE.get_end().get_y());
	is_portal_clicked=false;
}

vector <Line> Level::get_portals(){
	vector <Line> portals;
	portals.push_back(this->portalA);
	portals.push_back(this->portalB);
	return portals;

}

void Level::draw_portals(){
	cwin<<this->portalA<<this->portalB;

}

void Level::draw_finish(){
	cwin << this->finish;
}

void Level::draw_all(){
	//draw blocks
	for(unsigned i = 0; i < blocks.size(); i++){
		blocks[i].draw();
	}
	//draw ememies
	for(unsigned i = 0; i < enemies.size(); i++){
		enemies[i].draw();
	}
	//draw player
	this->player.draw();

	//portal_button
	draw_buttons();

	//draw_portals
	draw_portals();

	draw_finish();

	cwin << MENU_LINE; // button-zone divider
	cwin << MESSAGE_LINE; // Message-zone divider
}

void Level::start_over(){
	cwin << Message(Point(-5,0), "Click to restart...", "red");
	cwin.get_mouse("");
	this->player.setLocation(player.getStartLocation());
	for(unsigned i = 0; i < enemies.size(); i++){
		enemies[i].setLocation(enemies[i].getStartLocation());
	}
}

bool Level::player_won(){
	if(abs(player.getLocation().get_x() - this->finish.get_x()) <= COLLISION_CLOSENESS
			&& abs(player.getLocation().get_y() - this->finish.get_y()) <= COLLISION_CLOSENESS){return true;}
	if(abs(player.getLocation().get_x() - this->finish.get_x()) <= COLLISION_CLOSENESS
			&& abs(player.getLocation().get_y() - this->finish.get_y()) <= COLLISION_CLOSENESS){return true;}
	return false;
}

void Level::player_lost(Enemy enemy){
	double enemy_x=enemy.getLocation().get_x();
	double enemy_y=enemy.getLocation().get_y();
	double player_x=player.getLocation().get_x();
	double player_y=player.getLocation().get_y();
	double distance=sqrt(pow((enemy_x-player_x),2)+pow((enemy_y-player_y),2));
	if (distance < ATTACK_NEARNESS){
		cwin<<Circle((Point(player_x, player_y)), DEATH_RADIUS, "red");
		start_over();
	}
}

bool Level::menu_click(Point click){
	if(click.get_y() < MENU_LINE.get_start().get_y()){
		return true;
	}
	return false;
}

bool Level::message_click(Point click){
	if(click.get_y() > MESSAGE_LINE.get_start().get_y()){
		return true;
	}
	return false;
}

bool Level::check_outside_click(Point click){
	if(menu_click(click) || message_click(click)){
		if(!message_click(click)){
			portal_click(click);
			reset_click(click);
		}
		return true;
	}
	return false;
}

void Level::start(){
	draw_all();
	while(!player_won()){
		Point click=cwin.get_mouse("Click what direction you want to move.");
		if(!check_outside_click(click)){
			player.move(click, blocks, get_portals());
		}

		cwin.clear();
		draw_all();
		for (unsigned int i=0; i<enemies.size(); i++){
			enemies[i].move(player, blocks);
			player_lost(enemies[i]);
		}
	}
}

